<project name="Sample usage of Salesforce Ant tasks" default="version" basedir="." xmlns:sf="antlib:com.salesforce">

    <property file="build.properties"/>
    <property environment="env"/>
	<setproxy proxyhost="10.68.248.34" proxyport="80"/>
    <!-- Setting default value for username, password and session id properties to empty string 
         so unset values are treated as empty. Without this, ant expressions such as ${sf.username}
         will be treated literally.
    -->
    <condition property="sf.username" value=""> <not> <isset property="sf.username"/> </not> </condition>
    <condition property="sf.password" value=""> <not> <isset property="sf.password"/> </not> </condition>
    <condition property="sf.sessionId" value=""> <not> <isset property="sf.sessionId"/> </not> </condition>

    <taskdef resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce">
        <classpath>
            <pathelement location="../ant-salesforce.jar" />        	
        </classpath>
    </taskdef>
	
		

    <!-- Retrieve an unpackaged set of metadata from your org -->
    <!-- The file unpackaged/package.xml lists what is to be retrieved -->
    <target name="retrieveUnpackaged">
      <mkdir dir="retrieveUnpackaged"/>
      <!-- Retrieve the contents into another directory -->
      <sf:retrieve username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="retrieveUnpackaged" unpackaged="unpackaged/package.xml"/>
    </target>

  
	
<macrodef name="git">
	<attribute name="command" />
	<attribute name="dir" default="D:\GIT\ANT37 - GIT\sample\Julyrepos" />
	<element name="args" optional="true" />
	<sequential>
		<echo message="git @{command}" />
		<exec executable="git" dir="@{dir}">
			<arg value="@{command}" />
			<args/>
		</exec>
	</sequential>
</macrodef>

<target name="version" description="Commits all changes to version git">
	<input message="Commit message" addproperty="commit-message" />
	<echo message="Commiting all changes with message ${commit-message}" />
	
	<git command="add">
		<args>
			<arg value="." />
		</args>
	</git>

	<git command="commit">
		<args>
			<arg value="-am ${commit-message}" />
		</args>
	</git>
	
	
	<git command="push" />
	
	
</target>
</project>		
		